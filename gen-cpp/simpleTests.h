/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef simpleTests_H
#define simpleTests_H

#include <TProcessor.h>
#include "test_types.h"

namespace testFunctions {

class simpleTestsIf {
 public:
  virtual ~simpleTestsIf() {}
  virtual void ping() = 0;
  virtual bool sendToServer(const std::string& a) = 0;
  virtual void sendToClient(std::string& _return) = 0;
};

class simpleTestsIfFactory {
 public:
  typedef simpleTestsIf Handler;

  virtual ~simpleTestsIfFactory() {}

  virtual simpleTestsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(simpleTestsIf* /* handler */) = 0;
};

class simpleTestsIfSingletonFactory : virtual public simpleTestsIfFactory {
 public:
  simpleTestsIfSingletonFactory(const boost::shared_ptr<simpleTestsIf>& iface) : iface_(iface) {}
  virtual ~simpleTestsIfSingletonFactory() {}

  virtual simpleTestsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(simpleTestsIf* /* handler */) {}

 protected:
  boost::shared_ptr<simpleTestsIf> iface_;
};

class simpleTestsNull : virtual public simpleTestsIf {
 public:
  virtual ~simpleTestsNull() {}
  void ping() {
    return;
  }
  bool sendToServer(const std::string& /* a */) {
    bool _return = false;
    return _return;
  }
  void sendToClient(std::string& /* _return */) {
    return;
  }
};


class simpleTests_ping_args {
 public:

  simpleTests_ping_args() {
  }

  virtual ~simpleTests_ping_args() throw() {}


  bool operator == (const simpleTests_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const simpleTests_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class simpleTests_ping_pargs {
 public:


  virtual ~simpleTests_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class simpleTests_ping_result {
 public:

  simpleTests_ping_result() {
  }

  virtual ~simpleTests_ping_result() throw() {}


  bool operator == (const simpleTests_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const simpleTests_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class simpleTests_ping_presult {
 public:


  virtual ~simpleTests_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _simpleTests_sendToServer_args__isset {
  _simpleTests_sendToServer_args__isset() : a(false) {}
  bool a;
} _simpleTests_sendToServer_args__isset;

class simpleTests_sendToServer_args {
 public:

  simpleTests_sendToServer_args() : a("") {
  }

  virtual ~simpleTests_sendToServer_args() throw() {}

  std::string a;

  _simpleTests_sendToServer_args__isset __isset;

  void __set_a(const std::string& val) {
    a = val;
  }

  bool operator == (const simpleTests_sendToServer_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    return true;
  }
  bool operator != (const simpleTests_sendToServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_sendToServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class simpleTests_sendToServer_pargs {
 public:


  virtual ~simpleTests_sendToServer_pargs() throw() {}

  const std::string* a;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _simpleTests_sendToServer_result__isset {
  _simpleTests_sendToServer_result__isset() : success(false) {}
  bool success;
} _simpleTests_sendToServer_result__isset;

class simpleTests_sendToServer_result {
 public:

  simpleTests_sendToServer_result() : success(0) {
  }

  virtual ~simpleTests_sendToServer_result() throw() {}

  bool success;

  _simpleTests_sendToServer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const simpleTests_sendToServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const simpleTests_sendToServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_sendToServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _simpleTests_sendToServer_presult__isset {
  _simpleTests_sendToServer_presult__isset() : success(false) {}
  bool success;
} _simpleTests_sendToServer_presult__isset;

class simpleTests_sendToServer_presult {
 public:


  virtual ~simpleTests_sendToServer_presult() throw() {}

  bool* success;

  _simpleTests_sendToServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class simpleTests_sendToClient_args {
 public:

  simpleTests_sendToClient_args() {
  }

  virtual ~simpleTests_sendToClient_args() throw() {}


  bool operator == (const simpleTests_sendToClient_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const simpleTests_sendToClient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_sendToClient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class simpleTests_sendToClient_pargs {
 public:


  virtual ~simpleTests_sendToClient_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _simpleTests_sendToClient_result__isset {
  _simpleTests_sendToClient_result__isset() : success(false) {}
  bool success;
} _simpleTests_sendToClient_result__isset;

class simpleTests_sendToClient_result {
 public:

  simpleTests_sendToClient_result() : success("") {
  }

  virtual ~simpleTests_sendToClient_result() throw() {}

  std::string success;

  _simpleTests_sendToClient_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const simpleTests_sendToClient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const simpleTests_sendToClient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleTests_sendToClient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _simpleTests_sendToClient_presult__isset {
  _simpleTests_sendToClient_presult__isset() : success(false) {}
  bool success;
} _simpleTests_sendToClient_presult__isset;

class simpleTests_sendToClient_presult {
 public:


  virtual ~simpleTests_sendToClient_presult() throw() {}

  std::string* success;

  _simpleTests_sendToClient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class simpleTestsClient : virtual public simpleTestsIf {
 public:
  simpleTestsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  simpleTestsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  bool sendToServer(const std::string& a);
  void send_sendToServer(const std::string& a);
  bool recv_sendToServer();
  void sendToClient(std::string& _return);
  void send_sendToClient();
  void recv_sendToClient(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class simpleTestsProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<simpleTestsIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (simpleTestsProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendToServer(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendToClient(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  simpleTestsProcessor(boost::shared_ptr<simpleTestsIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &simpleTestsProcessor::process_ping;
    processMap_["sendToServer"] = &simpleTestsProcessor::process_sendToServer;
    processMap_["sendToClient"] = &simpleTestsProcessor::process_sendToClient;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~simpleTestsProcessor() {}
};

class simpleTestsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  simpleTestsProcessorFactory(const ::boost::shared_ptr< simpleTestsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< simpleTestsIfFactory > handlerFactory_;
};

class simpleTestsMultiface : virtual public simpleTestsIf {
 public:
  simpleTestsMultiface(std::vector<boost::shared_ptr<simpleTestsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~simpleTestsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<simpleTestsIf> > ifaces_;
  simpleTestsMultiface() {}
  void add(boost::shared_ptr<simpleTestsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

  bool sendToServer(const std::string& a) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->sendToServer(a);
      } else {
        ifaces_[i]->sendToServer(a);
      }
    }
  }

  void sendToClient(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->sendToClient(_return);
        return;
      } else {
        ifaces_[i]->sendToClient(_return);
      }
    }
  }

};

} // namespace

#endif
