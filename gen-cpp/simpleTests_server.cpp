// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "simpleTests.h"
#include <iostream>
#include <string>
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <curl/curl.h>

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::testFunctions;

string data;

size_t writeCallback(char* buf, size_t size, size_t nmemb, void* up)
  { 
      for (int c = 0; c<size*nmemb; c++)
      {
          data.push_back(buf[c]);
      }
      return size*nmemb;
  }

string getBody(string a)
{
  CURL* curl=curl_easy_init();
  CURLcode res;
  data.clear();
  curl_easy_setopt(curl, CURLOPT_URL, a.c_str());
  curl_easy_setopt(curl, CURLOPT_HEADER, 0);
  // curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &writeCallback);
  res=curl_easy_perform(curl);
  if(res != CURLE_OK)
      fprintf(stderr, "curl_easy_perform() failed: %s\n",curl_easy_strerror(res));
  curl_easy_cleanup(curl);
  return data;
}

class simpleTestsHandler : virtual public simpleTestsIf {
 public:
  string b;
  simpleTestsHandler() 
  {}   

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  bool sendToServer(const std::string& a) {
    cout<<endl<<"Request for -- "<<a<<"\t";
    b=getBody(a);
    return true;
  }

  void sendToClient(std::string& _return) {
    _return=b;
  }

};

int main(int argc, char **argv) 
{
  int port = 9090;
  shared_ptr<simpleTestsHandler> handler(new simpleTestsHandler());
  shared_ptr<TProcessor> processor(new simpleTestsProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

